package com.leyijf.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.leyijf.bean.BindedCardBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BINDED_CARD_BEAN".
*/
public class BindedCardBeanDao extends AbstractDao<BindedCardBean, Long> {

    public static final String TABLENAME = "BINDED_CARD_BEAN";

    /**
     * Properties of entity BindedCardBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Bank_card_icon = new Property(1, String.class, "bank_card_icon", false, "BANK_CARD_ICON");
        public final static Property Bank_card_num = new Property(2, String.class, "bank_card_num", false, "BANK_CARD_NUM");
        public final static Property Bank_id = new Property(3, String.class, "bank_id", false, "BANK_ID");
        public final static Property Bank_name = new Property(4, String.class, "bank_name", false, "BANK_NAME");
        public final static Property UserId = new Property(5, Long.class, "userId", false, "USER_ID");
    }

    private Query<BindedCardBean> userBean_Binded_cardQuery;

    public BindedCardBeanDao(DaoConfig config) {
        super(config);
    }
    
    public BindedCardBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BINDED_CARD_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BANK_CARD_ICON\" TEXT," + // 1: bank_card_icon
                "\"BANK_CARD_NUM\" TEXT," + // 2: bank_card_num
                "\"BANK_ID\" TEXT," + // 3: bank_id
                "\"BANK_NAME\" TEXT," + // 4: bank_name
                "\"USER_ID\" INTEGER);"); // 5: userId
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_BINDED_CARD_BEAN_BANK_ID ON \"BINDED_CARD_BEAN\"" +
                " (\"BANK_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BINDED_CARD_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BindedCardBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bank_card_icon = entity.getBank_card_icon();
        if (bank_card_icon != null) {
            stmt.bindString(2, bank_card_icon);
        }
 
        String bank_card_num = entity.getBank_card_num();
        if (bank_card_num != null) {
            stmt.bindString(3, bank_card_num);
        }
 
        String bank_id = entity.getBank_id();
        if (bank_id != null) {
            stmt.bindString(4, bank_id);
        }
 
        String bank_name = entity.getBank_name();
        if (bank_name != null) {
            stmt.bindString(5, bank_name);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(6, userId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BindedCardBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bank_card_icon = entity.getBank_card_icon();
        if (bank_card_icon != null) {
            stmt.bindString(2, bank_card_icon);
        }
 
        String bank_card_num = entity.getBank_card_num();
        if (bank_card_num != null) {
            stmt.bindString(3, bank_card_num);
        }
 
        String bank_id = entity.getBank_id();
        if (bank_id != null) {
            stmt.bindString(4, bank_id);
        }
 
        String bank_name = entity.getBank_name();
        if (bank_name != null) {
            stmt.bindString(5, bank_name);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(6, userId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BindedCardBean readEntity(Cursor cursor, int offset) {
        BindedCardBean entity = new BindedCardBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bank_card_icon
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bank_card_num
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bank_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bank_name
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // userId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BindedCardBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBank_card_icon(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBank_card_num(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBank_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBank_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BindedCardBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BindedCardBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BindedCardBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "binded_card" to-many relationship of UserBean. */
    public List<BindedCardBean> _queryUserBean_Binded_card(Long userId) {
        synchronized (this) {
            if (userBean_Binded_cardQuery == null) {
                QueryBuilder<BindedCardBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                userBean_Binded_cardQuery = queryBuilder.build();
            }
        }
        Query<BindedCardBean> query = userBean_Binded_cardQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

}
