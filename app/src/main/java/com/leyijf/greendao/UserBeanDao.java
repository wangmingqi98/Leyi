package com.leyijf.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.leyijf.bean.UserBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_BEAN".
*/
public class UserBeanDao extends AbstractDao<UserBean, Long> {

    public static final String TABLENAME = "USER_BEAN";

    /**
     * Properties of entity UserBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User_id = new Property(1, String.class, "user_id", false, "USER_ID");
        public final static Property User_name = new Property(2, String.class, "user_name", false, "USER_NAME");
        public final static Property User_img = new Property(3, String.class, "user_img", false, "USER_IMG");
        public final static Property User_mobile = new Property(4, String.class, "user_mobile", false, "USER_MOBILE");
        public final static Property User_mobile_referee = new Property(5, String.class, "user_mobile_referee", false, "USER_MOBILE_REFEREE");
        public final static Property Id_passed = new Property(6, int.class, "id_passed", false, "ID_PASSED");
        public final static Property Has_paypassword = new Property(7, int.class, "has_paypassword", false, "HAS_PAYPASSWORD");
    }

    private DaoSession daoSession;


    public UserBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: user_id
                "\"USER_NAME\" TEXT," + // 2: user_name
                "\"USER_IMG\" TEXT," + // 3: user_img
                "\"USER_MOBILE\" TEXT," + // 4: user_mobile
                "\"USER_MOBILE_REFEREE\" TEXT," + // 5: user_mobile_referee
                "\"ID_PASSED\" INTEGER NOT NULL ," + // 6: id_passed
                "\"HAS_PAYPASSWORD\" INTEGER NOT NULL );"); // 7: has_paypassword
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_USER_BEAN_USER_ID ON \"USER_BEAN\"" +
                " (\"USER_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(2, user_id);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(3, user_name);
        }
 
        String user_img = entity.getUser_img();
        if (user_img != null) {
            stmt.bindString(4, user_img);
        }
 
        String user_mobile = entity.getUser_mobile();
        if (user_mobile != null) {
            stmt.bindString(5, user_mobile);
        }
 
        String user_mobile_referee = entity.getUser_mobile_referee();
        if (user_mobile_referee != null) {
            stmt.bindString(6, user_mobile_referee);
        }
        stmt.bindLong(7, entity.getId_passed());
        stmt.bindLong(8, entity.getHas_paypassword());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(2, user_id);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(3, user_name);
        }
 
        String user_img = entity.getUser_img();
        if (user_img != null) {
            stmt.bindString(4, user_img);
        }
 
        String user_mobile = entity.getUser_mobile();
        if (user_mobile != null) {
            stmt.bindString(5, user_mobile);
        }
 
        String user_mobile_referee = entity.getUser_mobile_referee();
        if (user_mobile_referee != null) {
            stmt.bindString(6, user_mobile_referee);
        }
        stmt.bindLong(7, entity.getId_passed());
        stmt.bindLong(8, entity.getHas_paypassword());
    }

    @Override
    protected final void attachEntity(UserBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserBean readEntity(Cursor cursor, int offset) {
        UserBean entity = new UserBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // user_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // user_img
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // user_mobile
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // user_mobile_referee
            cursor.getInt(offset + 6), // id_passed
            cursor.getInt(offset + 7) // has_paypassword
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUser_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUser_img(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUser_mobile(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUser_mobile_referee(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setId_passed(cursor.getInt(offset + 6));
        entity.setHas_paypassword(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
