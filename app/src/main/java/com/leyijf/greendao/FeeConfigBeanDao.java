package com.leyijf.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.leyijf.bean.FeeConfigBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FEE_CONFIG_BEAN".
*/
public class FeeConfigBeanDao extends AbstractDao<FeeConfigBean, Long> {

    public static final String TABLENAME = "FEE_CONFIG_BEAN";

    /**
     * Properties of entity FeeConfigBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Fee_id = new Property(1, String.class, "fee_id", false, "FEE_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Min_price = new Property(3, double.class, "min_price", false, "MIN_PRICE");
        public final static Property Max_price = new Property(4, double.class, "max_price", false, "MAX_PRICE");
        public final static Property Fee = new Property(5, double.class, "fee", false, "FEE");
        public final static Property Fee_type = new Property(6, String.class, "fee_type", false, "FEE_TYPE");
        public final static Property Vip_id = new Property(7, String.class, "vip_id", false, "VIP_ID");
        public final static Property UserId = new Property(8, Long.class, "userId", false, "USER_ID");
    }

    private Query<FeeConfigBean> userBean_Fee_configQuery;

    public FeeConfigBeanDao(DaoConfig config) {
        super(config);
    }
    
    public FeeConfigBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FEE_CONFIG_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FEE_ID\" TEXT," + // 1: fee_id
                "\"NAME\" TEXT," + // 2: name
                "\"MIN_PRICE\" REAL NOT NULL ," + // 3: min_price
                "\"MAX_PRICE\" REAL NOT NULL ," + // 4: max_price
                "\"FEE\" REAL NOT NULL ," + // 5: fee
                "\"FEE_TYPE\" TEXT," + // 6: fee_type
                "\"VIP_ID\" TEXT," + // 7: vip_id
                "\"USER_ID\" INTEGER);"); // 8: userId
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_FEE_CONFIG_BEAN_FEE_ID ON \"FEE_CONFIG_BEAN\"" +
                " (\"FEE_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FEE_CONFIG_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FeeConfigBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String fee_id = entity.getFee_id();
        if (fee_id != null) {
            stmt.bindString(2, fee_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindDouble(4, entity.getMin_price());
        stmt.bindDouble(5, entity.getMax_price());
        stmt.bindDouble(6, entity.getFee());
 
        String fee_type = entity.getFee_type();
        if (fee_type != null) {
            stmt.bindString(7, fee_type);
        }
 
        String vip_id = entity.getVip_id();
        if (vip_id != null) {
            stmt.bindString(8, vip_id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(9, userId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FeeConfigBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String fee_id = entity.getFee_id();
        if (fee_id != null) {
            stmt.bindString(2, fee_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindDouble(4, entity.getMin_price());
        stmt.bindDouble(5, entity.getMax_price());
        stmt.bindDouble(6, entity.getFee());
 
        String fee_type = entity.getFee_type();
        if (fee_type != null) {
            stmt.bindString(7, fee_type);
        }
 
        String vip_id = entity.getVip_id();
        if (vip_id != null) {
            stmt.bindString(8, vip_id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(9, userId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FeeConfigBean readEntity(Cursor cursor, int offset) {
        FeeConfigBean entity = new FeeConfigBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fee_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.getDouble(offset + 3), // min_price
            cursor.getDouble(offset + 4), // max_price
            cursor.getDouble(offset + 5), // fee
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // fee_type
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // vip_id
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // userId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FeeConfigBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFee_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMin_price(cursor.getDouble(offset + 3));
        entity.setMax_price(cursor.getDouble(offset + 4));
        entity.setFee(cursor.getDouble(offset + 5));
        entity.setFee_type(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setVip_id(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUserId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FeeConfigBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FeeConfigBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FeeConfigBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "fee_config" to-many relationship of UserBean. */
    public List<FeeConfigBean> _queryUserBean_Fee_config(Long userId) {
        synchronized (this) {
            if (userBean_Fee_configQuery == null) {
                QueryBuilder<FeeConfigBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                userBean_Fee_configQuery = queryBuilder.build();
            }
        }
        Query<FeeConfigBean> query = userBean_Fee_configQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

}
